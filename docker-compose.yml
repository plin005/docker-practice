version: "2.2"

services:
  web:
    image: node:14
    container_name: react-web
    working_dir: /app
    volumes:
      - ./react-web:/app
      - react-web-modules:/app/node_modules
    ports:
      - "3000:3000"
    depends_on:
      - node-api
    networks:
      - app_net
    command: bash -c "yarn install && yarn start"

  node-api:
    image: node:14
    container_name: node-api
    working_dir: /app
    volumes: 
      - ./node-api:/app/
      - node-api-modules:/app/node_modules
    ports: 
      - "4000:4000"
    build:
      context: node-api
      dockerfile: Dockerfile
    depends_on:
      - backend-api
    networks:
      - app_net 
    command: bash -c "npm install && node app.js"

  backend-api:
    image: gradle:5.5.1-jdk11
    container_name: backend-api
    working_dir: /app
    volumes:
      - ./backend:/app
      - gradle-cache:/home/gradle/.gradle
    environment:
      DB_HOST: postgres-db
      DB_PORT: 5432
      DB_NAME: test
      DB_USER: admin
      DB_PASSWORD: admin
    ports:
      - "8080:8080"
    depends_on:
      - postgres-db
    networks:
      - app_net
    command: ./gradlew clean bootRun

  postgres-db:
    image: postgres:11.4
    container_name: postgres-db
    restart: always
    environment:
      POSTGRES_USER: admin
      POSTGRES_PASSWORD: admin
      POSTGRES_DB: test
    volumes:
      - db-cache:/var/lib/postgresql/data
    ports:
      - "5432:5432"
    networks:
      - app_net

volumes:
  react-web-modules:
  node-api-modules:
  gradle-cache:
  db-cache:

networks:
  app_net:
